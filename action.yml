# action.yml
name: 'Main Guardian Agent'
description: 'Analyzes PR diffs against the main branch using Gemini AI and comments on the PR with the analysis.'
author: 'Ispx'

branding:
  icon: 'anchor'
  color: 'black'

# Define as entradas que a action aceita
inputs:
  gemini-api-key:
    description: 'API Key for Google Gemini.'
    required: true
  github-token:
    description: 'GitHub token for posting comments and checking out code. Defaults to github.token.'
    required: true
    default: ${{ github.token }} # Usa o token padrão do workflow

# Define como a action será executada (usando passos compostos)
runs:
  using: 'composite'
  steps:
    # 1. Checkout do código do repositório onde a action está rodando
    #    Precisamos do histórico completo para comparar com 'main'
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ inputs.github-token }}
        fetch-depth: 0 # Busca todo o histórico para poder comparar branches

    # 2. Script principal para analisar o diff e chamar a API Gemini
    - name: Analyze Diff and Generate Report
      id: analyze # Dá um ID ao passo para referenciar outputs se necessário no futuro
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }} # Usa o token passado como input
        PR_NUMBER: ${{ github.event.pull_request.number }}
        REPO_FULL_NAME: ${{ github.repository }}
        URL_GEMINI: https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent
      run: |
        # Verifica se jq está instalado (dependência)
        if ! command -v jq &> /dev/null
        then
            echo "jq could not be found. Please install jq on the runner."
            exit 1
        fi
        # Verifica se curl está instalado (dependência)
        if ! command -v curl &> /dev/null
        then
            echo "curl could not be found. Please install curl on the runner."
            exit 1
        fi

        echo "Starting analysis..."
        # Tenta determinar a branch base remota (geralmente origin/main)
        BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
        if [ -z "$BASE_BRANCH" ]; then
          echo "Could not determine the default remote branch. Assuming 'main'."
          exit 1
        fi
        echo "Base branch identified as: origin/$BASE_BRANCH"

        # Garante que a branch base remota está atualizada localmente
        git fetch origin $BASE_BRANCH --no-tags # Evita buscar tags desnecessárias


        BASE_REF="origin/$BASE_BRANCH"
        HEAD_REF="origin/${{ github.head_ref || github.ref_name }}" # O commit atual do PR

        # Garante que a branch $HEAD_REF remota está atualizada localmente
        git fetch origin ${{ github.head_ref }}


        # Define as mensagens do sistema para a IA (mantidas aqui para simplicidade)
        # TODO: Considerar tornar estas mensagens inputs da action para maior flexibilidade
        system_msg_1="Você é responsável por proteger a branch main das novas alterações que serão implementadas, para isso você precisa realizar uma análise criteriosa das novas alterações que serão implementadas."
        system_msg_2="Seu objetivo é identificar possíveis bugs, vulnerabilidades, alterações críticas que possam afetar as funcionalidades já existentes na branch $BASE_REF, sugerir melhorias/refatorações nas implementações da branch $HEAD_REF e por fim gerar um score de aprovação entre 0 a 10 para aprovação das novas mudanças, porém caso exista algum bug, quebra de funcionalidade na branch $BASE_REF vulnerabilidade ou outro problema critico o scode deve ser 0."
        system_msg_3="Para dar mais contexto do impacto das novas alterações você sempre será contextualizado da leitura original do arquivo antes das novas alterações, caso estiver fazio significa que o arquivo não existe na branch $BASE_REF."
        system_msg_4="Por fim, use icons para demarcar cada tipo de análise, por exemplo, um icone expecifico para anlaise de bugs, outro para vulnerabilidades, etc. Formate a saída em Markdown."


        # Pega a lista de arquivos alterados
        echo "Identifying changed files between $BASE_REF and $HEAD_REF..."
        changed_files=$(git diff --name-only $BASE_REF $HEAD_REF)

        if [ -z "$changed_files" ]; then
          echo "No changes detected between $BASE_REF and $HEAD_REF."
          # Cria um arquivo de análise vazio para evitar erro no passo de comentário
          echo "Nenhuma alteração detectada para análise." > analysis.txt
          exit 0 # Sai com sucesso, pois não há nada a analisar
        fi

        echo "Changed files:"
        echo "$changed_files"
        echo "---"

        # Variável para armazenar todas os retornos da IA.
        all_outputs="#Analyse Main Guardian Agent\n\n\\n\n"

        # Itera sobre cada arquivo alterado para gerar relatório de análise.
        for file in $changed_files; do
          
          echo "Analyzing file: $file"
          
          # Extrai conteúdo atual do arquivo na branch do PR
          # Usar --no-prefix para caminhos mais limpos no diff
          diff_output=$(git diff --no-prefix $BASE_REF $HEAD_REF -- "$file")
          

          # Se o diff estiver vazio (ex: apenas mudança de modo), pula a análise para este arquivo
          if [ -z "$diff_output" ]; then
            echo "Skipping $file (no content changes detected)."
            continue
          fi

          # Realiza a leitura do arquivo sem as mudanças para dar mais contexto dos impactos das alterações para a IA
          original_file_output=""
          if git cat-file -e $BASE_REF:"$file"; then
            original_file_output=$(git show $BASE_REF:"$file")
          else
            echo "File $file does not exist in $BASE_REF. Skipping original content."
            original_file_output=""
          fi

          # Cria o payload para requisição Gemini
          # Nota: A API pode ter limites no tamanho do diff. Tratar erros ou dividir diffs grandes pode ser necessário.
          json_payload=$(jq -n \
          --arg base_ref "$BASE_REF" \
          --arg head_ref "$HEAD_REF" \
          --arg file_name "$file" \
          --arg original_file "$original_file_output" \
          --arg diff "$diff_output" \
          --arg msg1 "$system_msg_1" \
          --arg msg2 "$system_msg_2" \
          --arg msg3 "$system_msg_3" \
          --arg msg4 "$system_msg_4" \
            '{
              system_instruction: {
                parts: [
                  { text: $msg1 },
                  { text: $msg2 },
                  { text: $msg3 },
                  { text: $msg4 }

                ]
              },
              contents: [
                {
                  parts: [
                  { text: "==== Leitura do arquivo \($file_name) antes das mudanças (Branch: \($base_ref)) =====\n\n" },
                  { text: $original_file },
                  { text: "==== Leitura do arquivo \($file_name) com as mudanças (Branch: \($head_ref)) =====\n\n" },
                  { text: $diff }
                  ]
                }
              ],
              generationConfig: {
                temperature: 0.5,
                topP: 0.8,
                topK: 10
              }
            }'
          )

          echo "$json_payload" > payload.json


          # Envia o payload para a IA Gemini
          # Adiciona -sS para silenciar progresso mas mostrar erros, e --fail para falhar em erros HTTP
          response=$(curl -sS --fail --location "$URL_GEMINI?key=${{ inputs.gemini-api-key }}" \
            --header 'Content-Type: application/json' \
            --data-binary @payload.json)

          # Verifica se o curl falhou
          if [ $? -ne 0 ]; then
            echo "Error calling Gemini API for file $file. Skipping analysis for this file."
            echo "Response was: $response" # Loga a resposta (pode conter detalhes do erro)
            all_outputs+="### Arquivo: \`$file\`\n⚠️ **Erro ao analisar este arquivo.**\n\n"
            continue # Pula para o próximo arquivo
          fi

          # Extrai as mensagens de retorno (assume estrutura de sucesso)
          # Adiciona verificação se o caminho existe no JSON antes de extrair
          output_text=$(echo "$response" | jq -r '.candidates[0].content.parts[0].text // "Erro: Resposta da IA não encontrada ou em formato inesperado."')

          # Armazena a mensagem na variável
          body_content="### Arquivo: \`$file\`\n$output_text\n\n---\n\n"


          # Envia o comentário para o PR
 
          echo "Posting comment to PR #$PR_NUMBER"
          # Verifica se o número do PR foi obtido
          if [ -z "$PR_NUMBER" ]; then
            echo "Error: Could not get Pull Request number."
            exit 1
          fi

          # Lê o conteúdo da análise e escapa para JSON
          # Usar jq -Rs . é uma forma robusta de converter texto em string JSON
          if [ -z "$body_content" ]; then
            echo "Analysis file is empty. Skipping comment."
            exit 0
          fi
          json_body=$(echo "$body_content" | jq -Rs .)

          # Monta o payload JSON final para a API do GitHub
          post_data="{\"body\": $json_body}"

          # URL da API para comentar no PR (issue)
          comments_url="https://api.github.com/repos/$REPO_FULL_NAME/issues/$PR_NUMBER/comments"

          # Faz a requisição POST para a API do GitHub
          curl_response=$(curl -sS --fail -w "%{http_code}" -X POST \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            -d "$post_data" \
            "$comments_url" -o /dev/null) # -o /dev/null descarta o corpo da resposta

          http_code=$(echo "$curl_response")

          if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
            echo "Successfully posted comment to PR #$PR_NUMBER (HTTP $http_code)."
          else
            echo "Error posting comment to PR #$PR_NUMBER. HTTP Status Code: $http_code"
            # Considerar logar mais detalhes se a API retornar um corpo de erro
            exit 1
          fi
          sleep 10
        done